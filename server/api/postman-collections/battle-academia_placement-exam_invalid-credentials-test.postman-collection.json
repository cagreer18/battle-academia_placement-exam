{
	"info": {
		"_postman_id": "f1eef652-a67c-488d-a604-504eb36199ae",
		"name": "Battle Academia: Placement Exam Invalid Creditionals Tests",
		"description": "A collection meant only to test credential errors for the Postgres database (e.g., invalid password, invalid username, invalid database). This collection exists, not to be an exhaustive collection of all the potential Postgres errors and their codes, but to reinforce that our API knows how to propegate these errors to the client.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get all champions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "275a066c-2f52-4aa7-b2d0-3ab0473d4174",
						"exec": [
							"pm.test(\"Status code is 500\", () => {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", () => {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    let schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");\r",
							"\r",
							"    let valid = tv4.validate(jsonData, schema);\r",
							"    if (tv4.error) {\r",
							"        console.error(`Error at PATH: ${tv4.error.dataPath}; MESSAGE: ${tv4.error.message}`);\r",
							"    }\r",
							"\r",
							"    pm.expect(valid).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/champions",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"champions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a champion",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "074f52c5-2423-4f8f-a5e3-66596bde860f",
						"exec": [
							"pm.test(\"Status code is 500\", () => {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", () => {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    let schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");\r",
							"\r",
							"    let valid = tv4.validate(jsonData, schema);\r",
							"    if (tv4.error) {\r",
							"        console.error(`Error at PATH: ${tv4.error.dataPath}; MESSAGE: ${tv4.error.message}`);\r",
							"    }\r",
							"\r",
							"    pm.expect(valid).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/champions/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"champions",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "164"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a summoner's playstyle",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e4ca1560-ae1b-4d82-b5f2-0ba60edc4408",
						"exec": [
							"pm.test(\"Status code is 500\", () => {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", () => {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    let schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");\r",
							"\r",
							"    let valid = tv4.validate(jsonData, schema);\r",
							"    if (tv4.error) {\r",
							"        console.error(`Error at PATH: ${tv4.error.dataPath}; MESSAGE: ${tv4.error.message}`);\r",
							"    }\r",
							"\r",
							"    pm.expect(valid).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/summoners/:platform/:name/suggestions",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"summoners",
						":platform",
						":name",
						"suggestions"
					],
					"variable": [
						{
							"key": "platform",
							"value": "NA1"
						},
						{
							"key": "name",
							"value": "UnusualHxro"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "23ea50c7-2357-440f-9cd1-320dc0197ab3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ed46e9bb-02cb-4fee-ba5f-e3798257d809",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "aaf77b9c-83b0-4673-beac-429e7974d639",
			"key": "ERROR_SCHEMA",
			"value": "{\n        \"type\": \"object\",\n        \"required\": [\n            \"code\",\n            \"message\"\n        ],\n        \"properties\": {\n            \"code\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n            },\n            \"message\": {\n                \"type\": \"string\"\n            }\n        }\n    }"
		},
		{
			"id": "3b2d04cc-2121-4c57-8743-26e442906c7f",
			"key": "baseUrl",
			"value": "{{SERVER_URL}}"
		}
	],
	"protocolProfileBehavior": {}
}